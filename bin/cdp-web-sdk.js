var CDP=function(n){var e={};function t(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return n[o].call(i.exports,i,i.exports,t),i.l=!0,i.exports}return t.m=n,t.c=e,t.d=function(n,e,o){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:o})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var i in n)t.d(o,i,function(e){return n[e]}.bind(null,i));return o},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s="./src/index.js")}({"./node_modules/webpack/buildin/global.js":function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://CDP/(webpack)/buildin/global.js?')},"./src/authentication/Authenticator.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Authenticator; });\n/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n\n\n\nclass Authenticator {\n\n    constructor(configuration) {\n        this.config = configuration;\n    }\n\n    authenticate() {\n        return this._authenticateWithRetry();\n    }\n\n    _authenticateWithRetry(retries = this.config.getClient().retryAttempts) {\n        return new Promise((resolve, reject) => {\n            let xhr = new XMLHttpRequest();\n            xhr.withCredentials = true;\n            let constBody = {\n                "appSourceId": this.config.getClient().appSourceId,\n                "deviceId": this.config.getClient().deviceId\n            };\n            xhr.open(\'POST\', this.config.getClient().authEndpoint);\n            xhr.setRequestHeader(\'Content-Type\', \'application/x-www-form-urlencoded\');\n            xhr.onload = () => {\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    resolve(xhr.response);\n                } else {\n                    if(retries > 0) {\n                        setTimeout(() => {\n                            resolve(this._authenticateWithRetry(retries - 1));\n                        }, this.config.getClient().retryDelay);\n                    } else {\n                        reject(xhr.status);\n                    }\n                }\n            };\n            xhr.onerror = () => {\n                if(retries > 0) {\n                    setTimeout(() => {\n                        resolve(this._authenticateWithRetry(retries - 1));\n                    }, this.config.getClient().retryDelay);\n                } else {\n                    reject(xhr.status);\n                }\n                reject(xhr.status);\n            };\n\n            xhr.send("auth=" + btoa(JSON.stringify(constBody)));\n        });\n    }\n}\n\n\n//# sourceURL=webpack://CDP/./src/authentication/Authenticator.js?')},"./src/client/Configuration.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Configuration; });\n/* harmony import */ var _app_models_baseConfiguration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @app/models/baseConfiguration */ \"./src/models/baseConfiguration.js\");\n/* harmony import */ var _app_logs_Logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @app/logs/Logger */ \"./src/logs/Logger.js\");\n/* harmony import */ var _app_settings_Constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @app/settings/Constants */ \"./src/settings/Constants.js\");\n/* harmony import */ var _app_settings_Constants__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_app_settings_Constants__WEBPACK_IMPORTED_MODULE_2__);\n/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n\n\n\n\n\nconst LOGGER_NAME = \"Configuration.js\";\n\nclass Configuration {\n\n    constructor(config, identity) {\n        this.identity = identity;\n        this.setConfiguration(config);\n    }\n\n    // Returns the serialized version of the configuration object\n    // TODO: It has problem serializing async functions\n    toJSON() {\n        return JSON.stringify(\n            this.configuration,\n            function(key, val) {\n                return (typeof val === 'function') ? val.toString() : val;\n            }\n        );\n    }\n\n    getIdentity() {\n        return this.identity;\n    }\n\n    getClient() {\n        return this.configuration.client;\n    }\n\n    getSchemas() {\n        return this.configuration.schemas;\n    }\n\n    getTransforms() {\n        return this.configuration.transforms;\n    }\n\n    getDataProviders() {\n        return this.configuration.dataProviders;\n    }\n\n    getSignals() {\n        return this.configuration.signals;\n    }\n\n    getConditions() {\n        return this.configuration.conditions;\n    }\n\n    getSelectors() {\n        return this.configuration.selectors;\n    }\n\n    // It will replace all the configuration with the value provided\n    // use register for partial set\n    setConfiguration(config) {\n        this._validateConfig(config);\n        this.configuration = Object.assign(_app_models_baseConfiguration__WEBPACK_IMPORTED_MODULE_0__[\"baseConfiguration\"], config);\n        this._assignDeviceIdSessionId(config);\n        this._assignRetryConfig(config);\n        this._assignConsentEventTypeName(config);\n        this._assignConsentEventCategoryName(config);\n        _app_logs_Logger__WEBPACK_IMPORTED_MODULE_1__[\"default\"].info(LOGGER_NAME, `Successfully set the web SDK configuration.`);\n    }\n\n    // For partial config set/update of [client, schemas, transforms, dataProviders, conditions].\n    // Use setConfiguration for full update.\n    // It will fully replace the signals with the provided value\n    register(config) {\n        this._validateConfig(config);\n\n        Object.keys(config).forEach(item => {\n            if ('signals' === item) {\n                this.configuration.signals = config.signals;\n            } else {\n                Object.assign(this.configuration[item], config[item]);\n            }\n        });\n\n        this._assignDeviceIdSessionId(config);\n    }\n\n    _assignConsentEventTypeName(config) {\n        if (config && 'client' in config && config.client.consentEventTypeName) {\n            this.configuration.client.consentEventTypeName = config.client.consentEventTypeName;\n        } else {\n            this.configuration.client.consentEventTypeName = _app_settings_Constants__WEBPACK_IMPORTED_MODULE_2__[\"eventClientConfig\"].CONSENT_EVENT_TYPE_NAME;\n        }\n    }\n\n    _assignConsentEventCategoryName(config) {\n        if (config && 'client' in config && config.client.consentEventCategoryName) {\n            this.configuration.client.consentEventCategoryName = config.client.consentEventCategoryName;\n        } else {\n            this.configuration.client.consentEventCategoryName = _app_settings_Constants__WEBPACK_IMPORTED_MODULE_2__[\"eventClientConfig\"].CONSENT_EVENT_CATEGORY_NAME;\n        }\n    }\n\n    _assignDeviceIdSessionId(config) {\n        this.configuration.client.sessionId = this.identity.getCustomerIdentity();\n        this.configuration.client.deviceId = this.configuration.client.sessionId;\n        if (config && 'client' in config && config.client.deviceId) {\n            this.configuration.client.sessionId = config.client.deviceId;\n            this.configuration.client.deviceId = config.client.deviceId;\n        }\n    }\n\n    _assignRetryConfig(config) {\n        if (config && 'client' in config && config.client.retryAttempts) {\n            this.configuration.client.retryAttempts = config.client.retryAttempts;\n        } else {\n            this.configuration.client.retryAttempts = _app_settings_Constants__WEBPACK_IMPORTED_MODULE_2__[\"eventClientConfig\"].REQUEST_RETRY_ATTEMPTS;\n        }\n\n        if(config && 'client' in config && config.client.retryDelayMS) {\n            this.configuration.client.retryDelayMS = config.client.retryDelayMS;\n        } else {\n            this.configuration.client.retryDelayMS = _app_settings_Constants__WEBPACK_IMPORTED_MODULE_2__[\"eventClientConfig\"].REQUEST_RETRY_DELAY_MS;\n        }\n    }\n\n    _validateConfig(config) {\n        this._validateObjectAttribute(config, 'client');\n        this._validateObjectAttribute(config, 'schemas');\n        this._validateObjectAttribute(config, 'transforms');\n        this._validateObjectAttribute(config, 'dataProviders');\n        this._validateObjectAttribute(config, 'conditions');\n        this._validateObjectAttribute(config, 'selectors');\n        this._validateArrayAttribute(config, 'signals');\n        this._validateNotSupportedAttributes(config);\n    }\n\n    _validateObjectAttribute(config, attribute) {\n        if (attribute in config && typeof config[attribute] !== \"object\") {\n            _app_logs_Logger__WEBPACK_IMPORTED_MODULE_1__[\"default\"].error(LOGGER_NAME, `${attribute} attribute must be an object`);\n            throw new Error(attribute + ' attribute must be an object');\n        }\n    }\n\n    _validateArrayAttribute(config, attribute) {\n        if (attribute in config && !Array.isArray(config[attribute])) {\n            _app_logs_Logger__WEBPACK_IMPORTED_MODULE_1__[\"default\"].error(LOGGER_NAME, `${attribute} attribute must be an array`);\n            throw new Error(attribute + ' attribute must be an array');\n        }\n    }\n\n    _validateNotSupportedAttributes(config) {\n        if (!Object.keys(config).every(item => _app_models_baseConfiguration__WEBPACK_IMPORTED_MODULE_0__[\"baseConfiguration\"].hasOwnProperty(item))) {\n            _app_logs_Logger__WEBPACK_IMPORTED_MODULE_1__[\"default\"].error(LOGGER_NAME, `Not supported attribute in the configuration.`);\n            throw new Error('Supported attributes in configuration are [client, schemas, transforms, dataProviders, signals, conditions, selectors]');\n        }\n    }\n}\n\n\n//# sourceURL=webpack://CDP/./src/client/Configuration.js?")},"./src/client/EventClient.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return EventClient; });\n/* harmony import */ var _app_utils_generateEventId__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @app/utils/generateEventId */ "./src/utils/generateEventId.js");\n/* harmony import */ var _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @app/settings/Constants */ "./src/settings/Constants.js");\n/* harmony import */ var _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _app_logs_Logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @app/logs/Logger */ "./src/logs/Logger.js");\n/* harmony import */ var _app_models_eventCategories__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @app/models/eventCategories */ "./src/models/eventCategories.js");\n/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n\n\n\n\n\n\n\nconst LOGGER_NAME = "EventClient.js";\n\nclass EventClient {\n\n    constructor(configuration, authenticator, consent) {\n        this.authenticator = authenticator;\n        this.configuration = configuration;\n        this.consent = consent;\n        this.clientIsReady = false;\n        this._checkBrowserCompatibility();\n    }\n\n    sendEvent(eventCategory, eventType, eventObject) {\n        return this._checkClientIsReady(this.configuration.getClient().retryAttempts).then(() => {\n            if(this._consentGranted()) {\n                const eventUuid = {};\n                eventUuid[_app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__["identityConfig"].UUID_NAME] = this.configuration.getClient().sessionId;\n\n                Object.assign(eventObject, eventUuid);\n\n                let eventBody = Object.assign(this._buildBaseEvent(eventCategory, eventType), eventObject);\n                let eventPayload = {\n                    "events": [\n                        eventBody\n                    ]\n                };\n\n                let eventParam = _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__["eventClientConfig"].EVENT_PARAM_NAME + "=" + btoa(JSON.stringify(eventPayload)); //base64encode\n                let eventFullUrl = this.configuration.getClient().beaconEndpoint + "?" + eventParam;\n\n                if (eventFullUrl.length > _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__["eventClientConfig"].MAX_URL_LENGTH) {\n                    _app_logs_Logger__WEBPACK_IMPORTED_MODULE_2__["default"].info(LOGGER_NAME,`Sending Post request for event: ${JSON.stringify(eventBody)}`);\n                    this._sendPostEvent(eventParam);\n                } else {\n                    _app_logs_Logger__WEBPACK_IMPORTED_MODULE_2__["default"].info(LOGGER_NAME, `Sending Get request for event: ${JSON.stringify(eventBody)}`);\n                    this._sendGetEvent(eventParam);\n                }\n            }\n        }).catch(() => {});\n    }\n\n    consentOptIn() {\n        this._checkClientIsReady(this.configuration.getClient().retryAttempts).then(() => {\n            _app_logs_Logger__WEBPACK_IMPORTED_MODULE_2__["default"].info(LOGGER_NAME, `Received ${_app_models_eventCategories__WEBPACK_IMPORTED_MODULE_3__["eventCategories"].CONSENT} opt-in event`);\n            this.sendEvent(this.configuration.getClient().consentEventCategoryName, this.configuration.getClient().consentEventTypeName, _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__["eventClientConfig"].CONSENT_OPT_IN_OBJECT);\n            this.consent.grantConsent();\n        }).catch();\n    }\n\n    consentOptOut() {\n        this._checkClientIsReady(this.configuration.getClient().retryAttempts).then(() => {\n            _app_logs_Logger__WEBPACK_IMPORTED_MODULE_2__["default"].info(LOGGER_NAME, `Received ${_app_models_eventCategories__WEBPACK_IMPORTED_MODULE_3__["eventCategories"].CONSENT} opt-out event`);\n            this.sendEvent(this.configuration.getClient().consentEventCategoryName, this.configuration.getClient().consentEventTypeName, _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__["eventClientConfig"].CONSENT_OPT_OUT_OBJECT);\n            this.consent.removeConsent();\n        }).catch();\n    }\n\n    _consentGranted() {\n        return this.consent.getConsent() && this.consent.getConsent().data === "opt_in";\n    }\n\n    _checkBrowserCompatibility() {\n        this.authenticator.authenticate()\n            .then(() => {\n                this._isAuthConfiguredCorrectly()\n                    .then(() => {\n                        this.clientIsReady = true;\n                        _app_logs_Logger__WEBPACK_IMPORTED_MODULE_2__["default"].info(LOGGER_NAME, `Successfully initialized the web SDK.`);\n                    })\n                    .catch(() => {\n                        this.clientIsReady = false;\n                        console.warn("The browser does not support or is blocking third party cookies from being set.");\n                    })\n            }).catch(() => {\n            this.clientIsReady = false;\n            console.warn("There was a problem calling CDP auth endpoint");\n        });\n    }\n\n    _checkClientIsReady(retries) {\n        return new Promise((resolve, reject) => {\n            if (this.clientIsReady) {\n                resolve();\n            } else {\n                if(retries > 0) {\n                    setTimeout(() => {\n                        resolve(this._checkClientIsReady(retries - 1));\n                    }, this.configuration.getClient().retryDelayMS);\n                } else{\n                    _app_logs_Logger__WEBPACK_IMPORTED_MODULE_2__["default"].error(LOGGER_NAME, `Event client is not ready (probably an authentication problem)`);\n                    reject(\'Event client is not ready (probably an authentication problem)\');\n                }\n            }\n        });\n    }\n\n    _buildBaseEvent(eventCategory, eventType) {\n        return {\n            deviceId: this.configuration.getClient().deviceId,\n            category: eventCategory,\n            eventType: eventType,\n            dateTime: (new Date()).toISOString(),\n            eventId: Object(_app_utils_generateEventId__WEBPACK_IMPORTED_MODULE_0__["default"])(),\n            sessionId: this.configuration.getClient().sessionId\n        }\n    }\n\n    _sendPostEvent(eventParam) {\n        this._request({\n            method: \'POST\',\n            url: this.configuration.getClient().beaconEndpoint,\n            headers: {\n                \'Content-Type\': \'application/x-www-form-urlencoded\'\n            },\n            body: eventParam\n        }).catch(() => {})\n    }\n\n    _sendGetEvent(eventParam) {\n        this._request({\n            method: \'GET\',\n            url: this.configuration.getClient().beaconEndpoint + "?" + eventParam\n        }).catch(() => {})\n    }\n\n    _isAuthConfiguredCorrectly() {\n        let eventPayload = {\n            "events": []\n        };\n\n        let eventParam = _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__["eventClientConfig"].EVENT_PARAM_NAME + "=" + btoa(JSON.stringify(eventPayload)); //base64encode\n\n        return this._request({\n            method: \'GET\',\n            url: this.configuration.getClient().beaconEndpoint + "?" + eventParam\n        }, 1)\n    }\n\n    _request(obj, retries = this.configuration.getClient().retryAttempts) {\n        return new Promise((resolve, reject) => {\n            let xhr = new XMLHttpRequest();\n            xhr.withCredentials = true;\n            xhr.open(obj.method || "GET", obj.url);\n            if (obj.headers) {\n                Object.keys(obj.headers).forEach(key => {\n                    xhr.setRequestHeader(key, obj.headers[key]);\n                });\n            }\n            xhr.onload = () => {\n                if (xhr.status >= 200 && xhr.status < 300) {\n                    resolve(xhr.response);\n                } else {\n                    if(retries > 0) {\n                        setTimeout(() => {\n                            if(xhr.status === 401) {\n                                this.authenticator.authenticate().catch();\n                            }\n                            resolve(this._request(obj,retries - 1));\n                        }, this.configuration.getClient().retryDelayMS);\n                    } else{\n                        reject(xhr.status);\n                        this.clientIsReady = false;\n                        xhr.abort();\n                        _app_logs_Logger__WEBPACK_IMPORTED_MODULE_2__["default"].error(LOGGER_NAME, `Unable to send request after ${this.configuration.getClient().retryAttempts} attempts`);\n                    }\n\n                }\n            };\n            xhr.onerror = () => {\n                if(retries > 0) {\n                    setTimeout(() => {\n                        resolve(this._request(obj,retries - 1));\n                    }, this.configuration.getClient().retryDelayMS);\n                } else {\n                    reject(xhr.status);\n                    this.clientIsReady = false;\n                    _app_logs_Logger__WEBPACK_IMPORTED_MODULE_2__["default"].error(LOGGER_NAME, `Unable to send request after ${this.configuration.getClient().retryAttempts} attempts`);\n                }\n            }\n            xhr.send(obj.body);\n        });\n    }\n\n}\n\n\n//# sourceURL=webpack://CDP/./src/client/EventClient.js?')},"./src/consent/Consent.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Consent; });\n/* harmony import */ var _app_cookies_cookieUtility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @app/cookies/cookieUtility */ "./src/cookies/cookieUtility.js");\n/* harmony import */ var _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @app/settings/Constants */ "./src/settings/Constants.js");\n/* harmony import */ var _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _app_logs_Logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @app/logs/Logger */ "./src/logs/Logger.js");\n/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n\n\n\n\n\n\n\nconst LOGGER_NAME = "Consent.js"\n\nclass Consent {\n    constructor(identity) {\n        this.cookieName = _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__["identityConfig"].CONSENT_COOKIE_NAME;\n        this.identity = identity;\n    }\n\n    getConsent() {\n        return _app_cookies_cookieUtility__WEBPACK_IMPORTED_MODULE_0__["cookieUtility"].getCookie(this.cookieName);\n    }\n\n    grantConsent() {\n        let date = new Date();\n        date.setTime(date.getTime() + (_app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__["identityConfig"].UUID_EXP_DAYS * 24 * 60 * 60 * 1000));\n\n        let cookieConfig = {\n            name: this.cookieName,\n            data: "opt_in",\n            cookieParams: {\n                expires: "",\n                path: \'/\'\n            }\n        }\n\n        _app_cookies_cookieUtility__WEBPACK_IMPORTED_MODULE_0__["cookieUtility"].newCookie(cookieConfig);\n        this.identity.setCustomerIdentityCookie();\n        _app_logs_Logger__WEBPACK_IMPORTED_MODULE_2__["default"].info(LOGGER_NAME, `Consent granted successfully`);\n    }\n\n    removeConsent() {\n        _app_cookies_cookieUtility__WEBPACK_IMPORTED_MODULE_0__["cookieUtility"].deleteCookie(this.cookieName);\n        _app_cookies_cookieUtility__WEBPACK_IMPORTED_MODULE_0__["cookieUtility"].deleteCookie(_app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__["identityConfig"].UUID_NAME);\n        _app_logs_Logger__WEBPACK_IMPORTED_MODULE_2__["default"].info(LOGGER_NAME, `Consent removed successfully`);\n    }\n}\n\n//# sourceURL=webpack://CDP/./src/consent/Consent.js?')},"./src/cookies/cookieUtility.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cookieUtility", function() { return cookieUtility; });\n/* harmony import */ var _app_logs_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @app/logs/Logger */ "./src/logs/Logger.js");\n/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n\n\n\n\n\nconst LOGGER_NAME = "cookieUtility.js"\n\nclass CookieUtility {\n\n    newCookie(cookieConfig) {\n        this._validateCookieParams(cookieConfig);\n        let cookieContent = this.objectToCookie(cookieConfig);\n        document.cookie = cookieContent;\n\n        _app_logs_Logger__WEBPACK_IMPORTED_MODULE_0__["default"].info(LOGGER_NAME, \'Successfully created a new cookie with this config: \', cookieConfig);\n    }\n\n    getCookie(cookieName) {\n        let cookies = document.cookie.split(\';\');\n        let foundCookie;\n\n        for (let i = 0; i < cookies.length; i++) {\n            if (cookies[i].trim().startsWith(`${cookieName}=`)) {\n                foundCookie = cookies[i];\n                break;\n            }\n        }\n\n        if (!foundCookie) {\n            _app_logs_Logger__WEBPACK_IMPORTED_MODULE_0__["default"].warn(LOGGER_NAME, `${cookieName} was not found in cookies`)\n        }\n\n        return foundCookie ? this.cookieToObject(foundCookie) : null;\n    }\n\n    cookieExists(cookieName) {\n        let foundCookie = document.cookie.split(\';\').some((item) => item.trim().startsWith(`${cookieName}=`));\n\n        if (!foundCookie) {\n            _app_logs_Logger__WEBPACK_IMPORTED_MODULE_0__["default"].warn(LOGGER_NAME, `${cookieName} was not found in cookies`)\n        }\n\n        return foundCookie;\n    }\n\n    deleteCookie(cookieName) {\n        if(this.cookieExists(cookieName)) {\n            document.cookie = cookieName + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";\n        }\n    }\n\n    cookieToObject(cookieString) {\n        let cookieConfig = {\n            name: "",\n            data: "",\n            cookieParams: {},\n            cookieFlags: []\n        }\n\n        try{\n            cookieString\n                .split(\';\')\n                .reduce((acc, value, index) => {\n                    let keyValue = value.split("=");\n                    if (index === 0 && keyValue.length === 2) {\n                        acc.name = this._parseCookieData(keyValue[0]);\n                        acc.data = this._parseCookieData(keyValue[1]);\n                    } else {\n                        if(keyValue.length > 1) {\n                            acc.cookieParams[keyValue[0]] = keyValue[1];\n                        } else {\n                            acc.cookieFlags.push(keyValue[0]);\n                        }\n                    }\n                    return acc;\n                }, cookieConfig);\n\n            return cookieConfig;\n\n        } catch (e) {\n            _app_logs_Logger__WEBPACK_IMPORTED_MODULE_0__["default"].error(LOGGER_NAME, `Error converting ${cookieString} to object.`, e);\n            return null;\n        }\n    }\n\n    objectToCookie(cookieObj) {\n        this._validateCookieParams(cookieObj);\n        let cookieParams = [];\n\n        cookieParams.push(`${cookieObj.name}=${cookieObj.data}`);\n\n        if (cookieObj.cookieParams) {\n            Object.entries(cookieObj.cookieParams).forEach(([key, value]) => {\n                cookieParams.push(`${key}=${value}`);\n            });\n        }\n\n        if (cookieObj.cookieFlags) {\n            cookieObj.cookieFlags.forEach((flag) => {\n                cookieParams.push(flag);\n            });\n        }\n\n        return cookieParams.join(\';\');\n    }\n\n    _parseCookieData(value) {\n        return decodeURIComponent(value.trim());\n    }\n\n    _validateCookieParams(cookieConfig) {\n        if (!cookieConfig.name) {\n            _app_logs_Logger__WEBPACK_IMPORTED_MODULE_0__["default"].error(LOGGER_NAME, \'cookieConfig.name is required\', cookieConfig);\n            throw new Error(\'cookieConfig.name is required\');\n        }\n        if (!cookieConfig.data) {\n            _app_logs_Logger__WEBPACK_IMPORTED_MODULE_0__["default"].error(LOGGER_NAME, \'cookieConfig.data is required\', cookieConfig);\n            throw new Error(\'cookieConfig.data is required\');\n        }\n    }\n}\n\nlet cookieUtility = new CookieUtility();\n\n\n//# sourceURL=webpack://CDP/./src/cookies/cookieUtility.js?')},"./src/engine/engine.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Engine; });\n/* harmony import */ var _app_logs_Logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @app/logs/Logger */ \"./src/logs/Logger.js\");\n/* harmony import */ var _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @app/settings/Constants */ \"./src/settings/Constants.js\");\n/* harmony import */ var _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__);\n/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n\n\n\n\n\n\n\nconst valueExtractors = {\n    page: pageValueExtractor,\n    data: dataValueExtractor\n}\n\nconst LOGGER_NAME = \"engine.js\"\n\nlet unsubscribeCallbacks = [];\nlet errors = [];\n\nclass Engine {\n\n    constructor(client, configuration) {}\n\n    createEngine ({ client, configuration, global }) {\n        setMutationObserver({ client, configuration, global });\n        processSignals({ client, configuration, global });\n        return errors;\n    }\n}\n\nfunction setMutationObserver({ client, configuration, global }) {\n\n    const mutationCallBack = debounce(function(mutationsList, observer) {\n        processSignals({ client, configuration, global })\n    }, _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__[\"engineConfig\"].MUTATION_OBSERVER.DEBOUNCE_TIME_MS)\n\n    // Options for the observer (which mutations to observe)\n    const config = _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__[\"engineConfig\"].MUTATION_OBSERVER.CONFIG;\n    const observer = new MutationObserver(mutationCallBack);\n    observer.disconnect();\n    const mainElement = window.document.querySelector(_app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__[\"engineConfig\"].MUTATION_OBSERVER.SELECTOR);\n    observer.observe(mainElement, config);\n}\n\nfunction debounce(func, wait, immediate) {\n    let timeout;\n    return function() {\n        let context = this, args = arguments;\n        let later = function() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        let callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) {\n            func.apply(context, args);\n        }\n    };\n}\n\nfunction destroyEngine() {\n    unsubscribeCallbacks.forEach(unsubscribeCallback => {\n        try {\n            unsubscribeCallback()\n        } catch (e) {\n            _app_logs_Logger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].warn(LOGGER_NAME, e);\n        }\n    })\n}\n\nfunction processSignals({ client, configuration, global }) {\n    destroyEngine(); // Unsubscribe previous signals\n    _clearErrors();\n\n    const signals = configuration.getSignals();\n\n    unsubscribeCallbacks = []\n\n    signals.forEach(signal => {\n        attachSignal({\n            signal,\n            global,\n            client,\n            configuration,\n            unsubscribeCallbacks\n        })\n    })\n}\n\nfunction getElements(selectorConfig, configuration, selectorName) {\n    if (!selectorConfig) {\n        _addError({\n            'selector': selectorName,\n            'message': 'The implementation not found in selectors'\n        });\n\n        return [];\n    }\n\n    let elements = [];\n\n    if (typeof selectorConfig.selector === 'function') {\n        elements = validateSelector(selectorConfig, configuration, selectorName);\n    } else {\n        elements = selectorConfig.selector === 'document'\n            ? [document]\n            : document.querySelectorAll(selectorConfig.selector);\n\n        if ('containsText' in selectorConfig) {\n            elements = filterElementsByInnerText(elements, selectorConfig.containsText);\n        }\n    }\n\n    return elements;\n}\n\nfunction validateSelector(selectorConfig, configuration, selectorName) {\n    let elements = [];\n\n    if (Array.isArray(selectorConfig.selector()) ||selectorConfig.selector() instanceof NodeList) {\n        selectorConfig.selector().forEach( (element, index) => {\n            if (element instanceof HTMLElement) {\n                elements.push(element);\n            } else {\n                _addError({\n                    'selector': selectorName,\n                    'message': 'Array element with index of ' + index + ' should be HTML element',\n                    'element': element\n                });\n            }\n        } );\n    } else {\n        _addError({\n            'selector': selectorName,\n            'message': 'should return array'\n        });\n    }\n\n    return elements;\n}\n\nfunction filterElementsByInnerText(elements, containsText) {\n    let filteredElements = [];\n\n    elements.forEach( element => {\n        if (element.textContent && element.textContent.toLowerCase().indexOf(containsText.toLowerCase()) > -1 ) {\n            filteredElements.push(element);\n        }\n    });\n\n    return filteredElements;\n}\n\nfunction attachSignal ({ signal, global, client, configuration, unsubscribeCallbacks }) {\n    const { document } = global\n    const { event } = signal  // TODO: validate signal structure. e.g. using json schema (needs external library)\n    const selectors = configuration.getSelectors();\n\n    const elements = getElements(selectors[event.selector], configuration, event.selector);\n\n    // register event handlers for all existing elements on the page\n    elements.forEach(element => {\n        const handler = createSignalHandler({\n            client,\n            signal,\n            global,\n            configuration\n        })\n        element.addEventListener(event.type, handler)\n        unsubscribeCallbacks.push(() => {\n            element.removeEventListener(event.type, handler)\n        })\n\n        if (isReadyStateChangeHandler(event.type, selectors[event.selector]) && document.readyState === 'complete') {\n            handler(event);\n        }\n    })\n}\n\nfunction createSignalHandler ({ signal, client, global, configuration }) {\n    const { mapping, schema, category, name } = signal\n\n    return (domEvent) => {\n        const capturedValue = mapping ? Object.keys(mapping).reduce((result, schemaField) => {\n            const map = mapping[schemaField]\n            const valueExtractor = valueExtractors[map.from]\n            result[schemaField] = valueExtractor({\n                map,\n                global,\n                domEvent,\n                configuration\n            })\n            return result\n        }, {}) : {};\n\n        if (schema === configuration.getClient().consentEventTypeName) {\n            if (name === _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__[\"eventClientConfig\"].CONSENT_OPT_IN_OBJECT.status) {\n                client.consentOptIn();\n            }\n            if (name === _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__[\"eventClientConfig\"].CONSENT_OPT_OUT_OBJECT.status) {\n                client.consentOptOut();\n            }\n        }\n        else {\n            client.sendEvent(category, schema, capturedValue);\n        }\n    }\n}\n\nfunction pageValueExtractor ({ map, domEvent, global, configuration}) {\n    try {\n        const { selector, scope } = map\n        const root = scope === 'event' ? domEvent.target : global.document\n        let match = root.querySelector(selector);\n        if (!match) {\n            match = root.querySelector(configuration.getSelectors()[selector].selector);\n        }\n        let value = match ? match.textContent : null\n        if (!value) {\n            value = match ? match.value : null\n        }\n        return value;\n    } catch (e) {\n        _app_logs_Logger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].warn(LOGGER_NAME, e);\n        return null;\n    }\n}\n\nfunction dataValueExtractor ({ map, domEvent, configuration }) {\n    try {\n        const dataProviders = configuration.getDataProviders();\n        const dataProvider = dataProviders[map.provider]\n        const data = dataProvider(domEvent)\n        return data ? data[map.attribute] : null\n    } catch (e) {\n        _app_logs_Logger__WEBPACK_IMPORTED_MODULE_0__[\"default\"].warn(LOGGER_NAME, e);\n        return null;\n    }\n}\n\nfunction isReadyStateChangeHandler (type, selector) {\n    return type === 'readystatechange' && selector.selector === 'document'\n}\n\nfunction _addError(error) {\n    if(errors.indexOf(error) === -1) {\n        errors.push(error);\n    }\n}\n\nfunction _clearErrors() {\n    errors = [];\n}\n\n//# sourceURL=webpack://CDP/./src/engine/engine.js?")},"./src/identity/Identity.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Identity; });\n/* harmony import */ var _app_cookies_cookieUtility__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @app/cookies/cookieUtility */ "./src/cookies/cookieUtility.js");\n/* harmony import */ var _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @app/settings/Constants */ "./src/settings/Constants.js");\n/* harmony import */ var _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _app_uuid_Uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @app/uuid/Uuid */ "./src/uuid/Uuid.js");\n/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n\n\n\n\n\nclass Identity {\n\n    getCustomerIdentity() {\n        if (_app_cookies_cookieUtility__WEBPACK_IMPORTED_MODULE_0__["cookieUtility"].cookieExists(_app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__["identityConfig"].UUID_NAME)) {\n            this.customerId = _app_cookies_cookieUtility__WEBPACK_IMPORTED_MODULE_0__["cookieUtility"].getCookie(_app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__["identityConfig"].UUID_NAME).data;\n            return this.customerId;\n        } else {\n            this.customerId = _app_uuid_Uuid__WEBPACK_IMPORTED_MODULE_2__["uuid"].v4();\n            return this.customerId;\n        }\n    }\n\n    setCustomerIdentityCookie() {\n        let date = new Date();\n        date.setTime(date.getTime() + (_app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__["identityConfig"].UUID_EXP_DAYS * 24 * 60 * 60 * 1000));\n\n        let cookieConfig = {\n            name: _app_settings_Constants__WEBPACK_IMPORTED_MODULE_1__["identityConfig"].UUID_NAME,\n            data: this.customerId,\n            cookieParams: {\n                expires: date.toUTCString(),\n                path: \'/\'\n            }\n        }\n\n        _app_cookies_cookieUtility__WEBPACK_IMPORTED_MODULE_0__["cookieUtility"].newCookie(cookieConfig);\n    }\n}\n\n\n\n\n\n//# sourceURL=webpack://CDP/./src/identity/Identity.js?')},"./src/index.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sendEvent", function() { return sendEvent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getUrlParam", function() { return getUrlParam; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "consentOptIn", function() { return consentOptIn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "consentOptOut", function() { return consentOptOut; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getConfiguration", function() { return getConfiguration; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setLogLevel", function() { return setLogLevel; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "configure", function() { return configure; });\n/* harmony import */ var _app_client_EventClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @app/client/EventClient */ "./src/client/EventClient.js");\n/* harmony import */ var _app_client_Configuration__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @app/client/Configuration */ "./src/client/Configuration.js");\n/* harmony import */ var _app_engine_engine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @app/engine/engine */ "./src/engine/engine.js");\n/* harmony import */ var _app_logs_Logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @app/logs/Logger */ "./src/logs/Logger.js");\n/* harmony import */ var _app_identity_Identity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @app/identity/Identity */ "./src/identity/Identity.js");\n/* harmony import */ var _app_authentication_Authenticator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @app/authentication/Authenticator */ "./src/authentication/Authenticator.js");\n/* harmony import */ var _app_consent_Consent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @app/consent/Consent */ "./src/consent/Consent.js");\n/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n\n\n\n\n\n\n\n\n\n\n\nlet client;\nlet configuration;\nlet identity;\nlet authenticator;\nlet consent;\nlet engine;\n\nfunction configure(config) {\n    if (!navigator.cookieEnabled) {\n        console.error("The browser does not support or is blocking cookies from being set.");\n        throw new Error();\n    }\n\n    if (config && \'client\' in config) {\n        identity = new _app_identity_Identity__WEBPACK_IMPORTED_MODULE_4__["default"]();\n        configuration = new _app_client_Configuration__WEBPACK_IMPORTED_MODULE_1__["default"](config, identity);\n        authenticator = new _app_authentication_Authenticator__WEBPACK_IMPORTED_MODULE_5__["default"](configuration);\n        consent = new _app_consent_Consent__WEBPACK_IMPORTED_MODULE_6__["default"](configuration.getIdentity());\n        client = new _app_client_EventClient__WEBPACK_IMPORTED_MODULE_0__["default"](configuration, authenticator, consent);\n        if (!engine) {\n            engine = new _app_engine_engine__WEBPACK_IMPORTED_MODULE_2__["default"](client, configuration);\n        }\n    } else {\n        configuration.register(config);\n    }\n\n    if (engine) {\n        return engine.createEngine({client, configuration, global});\n    } else {\n        console.error("No CDP engine instance found.");\n        throw new Error();\n    }\n}\n\nfunction sendEvent(eventCategory, eventName, eventObject) {\n    client.sendEvent(eventCategory, eventName, eventObject);\n}\n\nfunction consentOptIn() {\n    client.consentOptIn();\n}\n\nfunction consentOptOut() {\n    client.consentOptOut();\n}\n\nfunction getUrlParam(param) {\n    return new URLSearchParams(location.search).get(param);\n}\n\nfunction getConfiguration() {\n    return configuration;\n}\n\nfunction setLogLevel(level) {\n    _app_logs_Logger__WEBPACK_IMPORTED_MODULE_3__["default"].setLogLevel(level);\n}\n\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))\n\n//# sourceURL=webpack://CDP/./src/index.js?')},"./src/logs/Logger.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _app_settings_Constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @app/settings/Constants */ \"./src/settings/Constants.js\");\n/* harmony import */ var _app_settings_Constants__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_app_settings_Constants__WEBPACK_IMPORTED_MODULE_0__);\n/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n\n\n\n\n\nconst logLevels = ['none', 'error', 'debug', 'all'];\n\nlet selectedLevel = _app_settings_Constants__WEBPACK_IMPORTED_MODULE_0__[\"loggerConfig\"].LOG_LEVEL;\n\nfunction setLogLevel(logLevel) {\n    if (!logLevels.includes(logLevel)) {\n        console.error('Available log levels: error, debug, all or none');\n    } else {\n        selectedLevel = logLevel;\n        console.info(`Log level set to ${selectedLevel}`)\n    }\n}\n\nfunction _log(methodName, logLevel, loggerName, ...args) {\n    if (logLevels.indexOf(selectedLevel) < logLevels.indexOf(logLevel)) {\n        return\n    }\n\n    const dataAndTime = (new Date()).toISOString()\n    const templateText = [`[${_app_settings_Constants__WEBPACK_IMPORTED_MODULE_0__[\"loggerConfig\"].APP_NAME}: ${loggerName}]`, dataAndTime, `${methodName.toUpperCase()}: `]\n\n    console[methodName](...templateText, ...args)\n}\n\nfunction _createLogger(methodName, logLevel) {\n    return (loggerName, ...args) => {\n        _log(methodName, logLevel, loggerName, ...args)\n    }\n}\n\nconst Logger = {\n    setLogLevel,\n    warn: _createLogger('warn', 'debug'),\n    info: _createLogger('info', 'all'),\n    error: _createLogger('error', 'error')\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Logger);\n\n//# sourceURL=webpack://CDP/./src/logs/Logger.js?")},"./src/models/baseConfiguration.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "baseConfiguration", function() { return baseConfiguration; });\n/* harmony import */ var _app_settings_Constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @app/settings/Constants */ "./src/settings/Constants.js");\n/* harmony import */ var _app_settings_Constants__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_app_settings_Constants__WEBPACK_IMPORTED_MODULE_0__);\n/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n\n\n\n\n\nconst baseConfiguration = {\n    client: {\n        appSourceId: "",\n        deviceId: "",\n        beaconEndpoint: "",\n        authEndpoint: "",\n        sessionId: "",\n        automaticallyTrackNavigationEvents: _app_settings_Constants__WEBPACK_IMPORTED_MODULE_0__["eventClientConfig"].TRACK_NAVIGATION_EVENTS,\n        retryAttempts: _app_settings_Constants__WEBPACK_IMPORTED_MODULE_0__["eventClientConfig"].REQUEST_RETRY_ATTEMPTS,\n        retryDelayMS: _app_settings_Constants__WEBPACK_IMPORTED_MODULE_0__["eventClientConfig"].REQUEST_RETRY_DELAY_MS,\n        consentEventTypeName: _app_settings_Constants__WEBPACK_IMPORTED_MODULE_0__["eventClientConfig"].CONSENT_EVENT_TYPE_NAME\n    },\n    schemas: {},\n    transforms: {},\n    dataProviders: {},\n    conditions: {},\n    signals: [],\n    selectors: {}\n};\n\n//# sourceURL=webpack://CDP/./src/models/baseConfiguration.js?')},"./src/models/eventCategories.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "eventCategories", function() { return eventCategories; });\n/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n\n\n\nconst eventCategories = {\n    ENGAGEMENT: "Engagement",\n    PROFILE: "Profile",\n    CONSENT: "Consent",\n    BEHAVIORAL: "Behavioral"\n};\n\n\n//# sourceURL=webpack://CDP/./src/models/eventCategories.js?')},"./src/settings/Constants.js":function(module,exports,__webpack_require__){"use strict";eval("/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n\n\n\nconst identityConfig = {\n    UUID_NAME: 'CustomerCookieID',\n    UUID_EXP_DAYS: '180',\n    CONSENT_COOKIE_NAME: 'CustomerConsentCookie'\n}\n\nconst loggerConfig = {\n    LOG_LEVEL: 'none', //error (shows errors), debug (shows error and warnings), all or none\n    APP_NAME: \"CDP_WEB_SDK\"\n}\n\nconst eventClientConfig = {\n    EVENT_PARAM_NAME: 'event',\n    MAX_URL_LENGTH: 8192,\n    REQUEST_RETRY_ATTEMPTS: 3,\n    REQUEST_RETRY_DELAY_MS: 3000,\n    CONSENT_EVENT_TYPE_NAME: 'consent-log',\n    CONSENT_EVENT_CATEGORY_NAME: \"Consent\",\n    CONSENT_OPT_IN_OBJECT: {\n        status: 'opt-in'\n    },\n    CONSENT_OPT_OUT_OBJECT: {\n        status: 'opt-out'\n    }\n}\n\nconst engineConfig = {\n    MUTATION_OBSERVER: {\n        CONFIG: {\n            attributes: true,\n            childList: true,\n            subtree: true\n        },\n        SELECTOR: 'body',\n        DEBOUNCE_TIME_MS: 250\n    }\n}\n\nmodule.exports = {\n    identityConfig,\n    loggerConfig,\n    eventClientConfig,\n    engineConfig\n};\n\n\n//# sourceURL=webpack://CDP/./src/settings/Constants.js?")},"./src/utils/generateEventId.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return generateEventId; });\n/* harmony import */ var _app_utils_sha1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @app/utils/sha1 */ "./src/utils/sha1.js");\n/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n\n\n\nfunction generateEventId() {\n    const dateTime = new Date().getTime;\n    const raw = window.navigator.userAgent + window.navigator.platform + dateTime + JSON.stringify({}) + Math.random();\n    return Object(_app_utils_sha1__WEBPACK_IMPORTED_MODULE_0__["default"])(raw).slice(0, 16);\n}\n\n\n//# sourceURL=webpack://CDP/./src/utils/generateEventId.js?')},"./src/utils/sha1.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return sha1; });\n/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT\n */\n\nfunction sha1(b) {\n  var i,\n    W = [],\n    A, B, C, D,\n    h = [ A = 0x67452301, B = 0xEFCDAB89, ~A, ~B, 0xC3D2E1F0 ],\n    words = [],\n    s = unescape(encodeURI(b)) + \'\\x80\',\n    j = s.length;\n\n  // See "Length bits" in notes\n  words[b = (--j / 4 + 2) | 15] = j * 8;\n\n  for (; ~j;) { // j !== -1\n    words[j >> 2] |= s.charCodeAt(j) << 8 * ~j--;\n    // words[j >> 2] |= s.charCodeAt(j) << 24 - 8 * j--;\n  }\n\n  for (i = j = 0; i < b; i += 16) {\n    A = h;\n\n    for (; j < 80;\n      A = [\n        (\n          A[4] +\n          (\n            W[j] =\n              (j < 16)\n                ? ~~words[i + j]\n                : s * 2 | s < 0 // s << 1 | s >>> 31\n          ) +\n          1518500249 +\n          [\n            (B & C | ~B & D),\n            s = (B ^ C ^ D) + 341275144,\n            (B & C | B & D | C & D) + 882459459,\n            s + 1535694389\n          ][/* 0 | (j++ / 20)*/j++ / 5 >> 2] +\n          ((s = A[0]) << 5 | s >>> 27)\n        ),\n        s,\n        B << 30 | B >>> 2,\n        C,\n        D\n      ]\n    ) {\n      s = W[j - 3] ^ W[j - 8] ^ W[j - 14] ^ W[j - 16];\n      B = A[1];\n      C = A[2];\n      D = A[3];\n    }\n\n    // See "Integer safety" in notes\n    for (j = 5; j;) h[--j] += A[j];\n\n    // j === 0\n  }\n\n  for (s = \'\'; j < 40;) {\n    // s += ((h[j >> 3] >> 4 * ~j++) & 15).toString(16);\n    s += (h[j >> 3] >> (7 - j++) * 4 & 15).toString(16);\n    // s += ((h[j >> 3] >> -4 * ++j) & 15).toString(16);\n  }\n\n  return s;\n}\n\n//# sourceURL=webpack://CDP/./src/utils/sha1.js?')},"./src/uuid/Uuid.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uuid", function() { return uuid; });\n/* harmony import */ var _app_uuid_stringify__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @app/uuid/stringify */ "./src/uuid/stringify.js");\n/* harmony import */ var _app_uuid_rng_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @app/uuid/rng.js */ "./src/uuid/rng.js");\n/*\n * Copyright (c) 2010-2020 Robert Kieffer and other contributors\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file https://github.com/uuidjs/uuid/blob/master/LICENSE.md or https://opensource.org/licenses/MIT\n */\n\n\n\n\n\n\nclass Uuid {\n    v4() {\n        const rnds = Object(_app_uuid_rng_js__WEBPACK_IMPORTED_MODULE_1__["default"])();\n\n        rnds[6] = rnds[6] & 0x0f | 0x40;\n        rnds[8] = rnds[8] & 0x3f | 0x80;\n\n        return Object(_app_uuid_stringify__WEBPACK_IMPORTED_MODULE_0__["stringify"])(rnds);\n    }\n\n}\n\nlet uuid = new Uuid();\n\n//# sourceURL=webpack://CDP/./src/uuid/Uuid.js?')},"./src/uuid/rng.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return rng; });\n/*\n * Copyright (c) 2010-2020 Robert Kieffer and other contributors\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file https://github.com/uuidjs/uuid/blob/master/LICENSE.md or https://opensource.org/licenses/MIT\n */\n\n\n\nvar getRandomValues = typeof crypto !== 'undefined' &&\n    crypto.getRandomValues &&\n    crypto.getRandomValues.bind(crypto) ||\n    typeof msCrypto !== 'undefined' &&\n    typeof msCrypto.getRandomValues === 'function' &&\n    msCrypto.getRandomValues.bind(msCrypto);\n\nvar rnds8 = new Uint8Array(16);\n\nfunction rng() {\n    if (!getRandomValues) {\n        throw new Error('not supported.');\n    }\n\n    return getRandomValues(rnds8);\n}\n\n//# sourceURL=webpack://CDP/./src/uuid/rng.js?")},"./src/uuid/stringify.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stringify\", function() { return stringify; });\n/*\n * Copyright (c) 2010-2020 Robert Kieffer and other contributors\n * All rights reserved.\n * SPDX-License-Identifier: MIT\n * For full license text, see the LICENSE file https://github.com/uuidjs/uuid/blob/master/LICENSE.md or https://opensource.org/licenses/MIT\n */\n\n\n\nfunction stringify(arr, offset = 0) {\n    const byteToHex = [];\n\n    for (let i = 0; i < 256; ++i) {\n        byteToHex.push((i + 0x100).toString(16).substr(1));\n    }\n\n    return (byteToHex[arr[offset]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] + '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] + '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] + '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] + '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\n\n\n//# sourceURL=webpack://CDP/./src/uuid/stringify.js?")}});