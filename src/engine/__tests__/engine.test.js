/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */

import {beforeEach, afterEach, it, jest} from '@jest/globals'
import Engine from '@app/engine/engine'
import Configuration from "@app/client/Configuration";

jest.mock("@app/client/Configuration");

let client;
let engine;

beforeEach(() => {
    client = {
        sendEvent: jest.fn()
    }
})

function createConfigurationMock(config) {
    let configurationMock = new Configuration(config)

    jest.spyOn(configurationMock, 'getSignals').mockImplementation(() => {
        return config.signals;
    });

    jest.spyOn(configurationMock, 'getSelectors').mockImplementation(() => {
        return config.selectors;
    });

    jest.spyOn(configurationMock, 'getDataProviders').mockImplementation(() => {
        return config.dataProviders;
    });

    jest.spyOn(configurationMock, 'getClient').mockImplementation(() => {
        return config.client ? config.client : {};
    });

    return configurationMock;
}

function createEngine(configuration) {
    engine = new Engine(client, configuration);
    engine.createEngine({client, configuration, global});
}

it('should be able to process a simple signal generated by a user click', () => {
    document.body.innerHTML = `
    <button class="test-button">
        <span>Click Me</span>
    </button>`

    let config = {
        signals: [
            {
                name: 'signal-0',
                schema: 'schema-0',
                category: 'category-0',
                event: {
                    type: 'click',
                    selector: 'selector-name-0'
                },
                mapping: {
                    buttonText: {
                        from: 'page',
                        selector: 'span',
                        scope: 'event'
                    }
                }
            }
        ],
        selectors: {
            'selector-name-0': {
                selector: '.test-button'
            }
        }
    }

    createEngine(createConfigurationMock(config));

    const event = new MouseEvent('click')
    document.body.querySelector('.test-button').dispatchEvent(event)

    expect(client.sendEvent).toHaveBeenCalledWith('category-0', 'schema-0', {
        buttonText: 'Click Me'
    })
})

it('should cleanup any registered handlers when the engine gets recreated', () => {
    document.body.innerHTML = `
    <button class="test-button">
        <span>Click Me</span>
    </button>`

    let config = {
        signals: [
            {
                name: 'signal-0',
                schema: 'schema-0',
                category: 'category-0',
                event: {
                    type: 'click',
                    selector: 'selector-name-0'
                },
                mapping: {
                    buttonText: {
                        from: 'page',
                        selector: 'span',
                        scope: 'event'
                    }
                }
            }
        ],
        selectors: {
            'selector-name-0': {
                selector: '.test-button'
            }
        }
    }

    createEngine(createConfigurationMock(config));

    document.body.querySelector('.test-button')
        .dispatchEvent(new MouseEvent('click'))

    expect(client.sendEvent).toHaveBeenCalledWith('category-0', 'schema-0', {
        buttonText: 'Click Me'
    })

    client.sendEvent.mockReset()

    createEngine(createConfigurationMock({signals: []}));

    document.body.querySelector('.test-button')
        .dispatchEvent(new MouseEvent('click'))

    expect(client.sendEvent).not.toHaveBeenCalled()
})

it('should be able to process a simple signal generated by a page load', () => {
    document.body.innerHTML = `
    <div class="product">
        <h1>Product X</h1>
        <h2>Price: <span class="price">$9.99</span></h2>
    </div>`

    let config = {
        signals: [
            {
                name: 'signal-0',
                schema: 'schema-0',
                category: 'category-0',
                event: {
                    type: 'readystatechange',
                    selector: 'selector-name-0'
                },
                mapping: {
                    name: {
                        from: 'page',
                        selector: '.product h1',
                        scope: 'document'
                    },
                    price: {
                        from: 'page',
                        selector: '.product .price',
                        scope: 'document'
                    }
                }
            }
        ],
        selectors: {
            'selector-name-0': {
                selector: 'document'
            }
        }
    }

    createEngine(createConfigurationMock(config));

    expect(client.sendEvent).toHaveBeenCalledWith('category-0', 'schema-0', {
        name: 'Product X',
        price: '$9.99'
    })
})

it('should be able to map a value from a data provider', () => {
    document.body.innerHTML = `
    <ul>
        <li data-product-id="1">
            <span class="name">Product X</span>
        </li>
        <li  data-product-id="2">
            <span class="name">Product Y</span>
        </li>
    </ul>`

    let config = {
        signals: [
            {
                name: 'signal-0',
                schema: 'schema-0',
                category: 'category-0',
                event: {
                    type: 'click',
                    selector: 'selector-name-0'
                },
                providers: [
                    'productCatalog'
                ],
                mapping: {
                    name: {
                        from: 'page',
                        selector: '.name',
                        scope: 'event'
                    },
                    price: {
                        from: 'data',
                        provider: 'productCatalog',
                        attribute: 'price'
                    }
                }
            }
        ],
        dataProviders: {
            productCatalog(domEvent) {
                const id = domEvent.target.getAttribute('data-product-id')
                const products = {
                    1: {
                        price: '$123.00'
                    },
                    2: {
                        price: '$321.00'
                    }
                }
                return products[id]
            }
        },
        selectors: {
            'selector-name-0': {
                selector: '[data-product-id]'
            }
        }
    }

    createEngine(createConfigurationMock(config));

    document.body.querySelectorAll('li')[0]
        .dispatchEvent(new MouseEvent('click'))

    expect(client.sendEvent).toHaveBeenCalledWith('category-0', 'schema-0', {
        name: 'Product X',
        price: '$123.00'
    })

    client.sendEvent.mockReset()

    document.body.querySelectorAll('li')[1]
        .dispatchEvent(new MouseEvent('click'))

    expect(client.sendEvent).toHaveBeenCalledWith('category-0', 'schema-0', {
        name: 'Product Y',
        price: '$321.00'
    })
})

it('should be able to process all healthy signals even if there is some malformed ones', () => {
    document.body.innerHTML = `
    <button class="test-button">
        <span>Click Me</span>
    </button>`

    let config = {
        signals: [
            {
                name: 'signal-0',
                schema: 'schema-0',
                category: 'category-0',
                event: {
                    type: 'click',
                    selector: 'selector-name-0'
                },
                mapping: {
                    buttonText: {
                        from: 'page',
                        selector: 'span',
                        scope: 'event'
                    }
                }
            },
            {
                name: 'malformed-signal-0',
                schema: 'schema-0',
                category: 'category-0',
                event: {
                    type: 'click',
                    selector: 'selector-name-1'
                },
                mapping: {
                    buttonText: {
                        from: 'page',
                        selector: 'span',
                        scope: 'event'
                    }
                }
            },
            {
                name: 'malformed-signal-1',
                schema: 'schema-1',
                category: 'category-1',
                event: {
                    type: 'click',
                    selector: 'selector-name-0'
                },
                mapping: {
                    buttonText: {
                        from: 'page',
                        selector: 'div', // Intentionally malformed: it should be span
                        scope: 'event'
                    }
                }
            },
            {
                name: 'malformed-signal-2',
                schema: 'schema-2',
                category: 'category-2',
                event: {
                    type: 'click',
                    selector: 'selector-name-0'
                },
                mapping: {
                    buttonText: {
                        from: 'data', // Intentionally malformed: it should be page
                        selector: 'span',
                        scope: 'event'
                    }
                }
            },
            {
                name: 'malformed-signal-2',
                schema: 'schema-2',
                category: 'category-2',
                event: {
                    type: 'click',
                    selector: 'incorrect'  // Intentionally malformed: the selector id does not exists
                }
            },
            {
                name: 'malformed-signal-2',
                schema: 'schema-2',
                category: 'category-2',
                event: {
                    type: 'click'
                    // Intentionally malformed: the selector is missing
                }
            }
        ],
        selectors: {
            'selector-name-0': {
                selector: '.test-button'
            },
            'selector-name-1': {
                selector: 'div > .test-button' // Intentionally malformed: it should be .test-button
            }
        }
    }

    createEngine(createConfigurationMock(config));

    const event = new MouseEvent('click')
    document.body.querySelector('.test-button').dispatchEvent(event)

    expect(client.sendEvent).toHaveBeenCalledWith('category-0', 'schema-0', {
        buttonText: 'Click Me'
    })
})

it('should be able to process a signal for an element selected by its text content', () => {
    document.body.innerHTML = `
    <button class="test-button">
        <span>Click Me</span>
    </button>`

    let config = {
        signals: [
            {
                name: 'signal-0',
                schema: 'schema-0',
                category: 'category-0',
                event: {
                    type: 'click',
                    selector: 'selector-name-0'
                },
                mapping: {
                    buttonText: {
                        from: 'page',
                        selector: 'span',
                        scope: 'event'
                    }
                }
            }
        ],
        selectors: {
            'selector-name-0': {
                selector: 'button',
                containsText: 'Click Me'
            }
        }
    }

    createEngine(createConfigurationMock(config));

    const event = new MouseEvent('click')
    document.body.querySelector('button').dispatchEvent(event)

    expect(client.sendEvent).toHaveBeenCalledWith('category-0', 'schema-0', {
        buttonText: 'Click Me'
    })
})

it('should be able to process a signal for an element selected by a custom function', () => {
    document.body.innerHTML = `
    <button class="test-button">
        <span>Click Me</span>
    </button>`

    let config = {
        signals: [
            {
                name: 'signal-0',
                schema: 'schema-0',
                category: 'category-0',
                event: {
                    type: 'click',
                    selector: 'selector-name-0'
                },
                mapping: {
                    buttonText: {
                        from: 'page',
                        selector: 'span',
                        scope: 'event'
                    }
                }
            }
        ],
        selectors: {
            'selector-name-0': {
                selector: function() {
                    return document.querySelectorAll('.test-button');
                }
            }
        }
    }

    createEngine(createConfigurationMock(config));

    const event = new MouseEvent('click')
    document.body.querySelector('button').dispatchEvent(event)

    expect(client.sendEvent).toHaveBeenCalledWith('category-0', 'schema-0', {
        buttonText: 'Click Me'
    })
})

it('should be able to process a consent opt-in signal for an element', () => {
    document.body.innerHTML = `
    <button class="test-button">
        <span>Click Me</span>
    </button>`

    let config = {
        client: {
            "consentEventTypeName": "consentLog",
            "consentEventCategoryName": "Consent"
        },
        signals: [
            {
                name: 'opt-in',
                schema: 'consentLog',
                category: "Consent",
                event: {
                    type: 'click',
                    selector: 'selector-name-0'
                }
            }
        ],
        selectors: {
            'selector-name-0': {
                selector: '.test-button'
            }
        }
    }

    createEngine(createConfigurationMock(config));

    const mockConsentOptIn = jest.fn()
    client.consentOptIn = mockConsentOptIn;

    const event = new MouseEvent('click')
    document.body.querySelector('button').dispatchEvent(event);

    expect(mockConsentOptIn).toHaveBeenCalledTimes(1);
})

it('should be able to process a consent opt-out signal for an element', () => {
    document.body.innerHTML = `
    <button class="test-button">
        <span>Click Me</span>
    </button>`

    let config = {
        client: {
            "consentEventTypeName": "consentLog",
            "consentEventCategoryName": "Consent"
        },
        signals: [
            {
                name: 'opt-out',
                schema: 'consentLog',
                category: "Consent",
                event: {
                    type: 'click',
                    selector: 'selector-name-0'
                }
            }
        ],
        selectors: {
            'selector-name-0': {
                selector: '.test-button'
            }
        }
    }

    createEngine(createConfigurationMock(config));

    const mockConsentOptOut = jest.fn()
    client.consentOptOut = mockConsentOptOut;

    const event = new MouseEvent('click')
    document.body.querySelector('button').dispatchEvent(event);

    expect(mockConsentOptOut).toHaveBeenCalledTimes(1);
})

it('should automatically track navigation events if it is enabled in the config', () => {
    document.body.innerHTML = `
    <button class="test-button">
        <span>Click Me</span>
    </button>`

    let config = {
        client: {
            "automaticallyTrackNavigationEvents": true
        },
        signals: [
            {
                name: 'opt-in',
                schema: 'consentLog',
                category: "Consent",
                event: {
                    type: 'click',
                    selector: 'selector-name-0'
                }
            }
        ],
        selectors: {
            'selector-name-0': {
                selector: '.test-button'
            }
        }
    }

    createEngine(createConfigurationMock(config));

    expect(client.sendEvent).toHaveBeenCalledWith('Behavioral', 'navigation', {
        hash: '',
        path: '/'
    })
})
